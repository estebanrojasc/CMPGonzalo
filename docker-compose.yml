services:
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   # Montar el código local en el contenedor para desarrollo.
  #   # Los cambios que hagas en tu máquina se reflejarán dentro del contenedor.
  #   volumes:
  #     - ./app:/usr/src/app/app
  #     - ./main.py:/usr/src/app/main.py
  #   ports:
  #     - "8001:8000" # Cambiado a 8001 para evitar conflictos si se descomenta
  #   # Cargar variables de entorno desde un archivo .env en la misma carpeta
  #   env_file:
  #     - .env
  #   # El comando para iniciar el servidor FastAPI.
  #   # Uvicorn es el servidor ASGI que ejecuta FastAPI.
  #   # --reload: Reinicia el servidor automáticamente cuando detecta cambios en el código. Ideal para desarrollo.
  #   # --host 0.0.0.0: Permite que el servidor sea accesible desde fuera del contenedor.
  #   command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  app:
    build: .
    container_name: cmp_marketresearch
    ports:
      - "8000:8000"
    volumes:
      - .:/usr/src/app
    env_file:
      - .env
    depends_on:
      - sqlserver_db # Cambiado de 'postgres' a 'sqlserver_db'
      - qdrant

  sqlserver_db:
    build: ./mssql_setup
    container_name: sqlserver_db
    # Cambiamos 'environment' por 'env_file' para que lea el .env
    env_file:
      - .env
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      # Montar el volumen de datos persistentes
      - qdrant_data:/qdrant/storage
      # Montar nuestro archivo de configuración personalizado
      - ./qdrant_config.yaml:/qdrant/config/config.yaml
    # Pasar las variables de entorno desde el archivo .env
    env_file:
      - .env

  # --- NUEVO SERVICIO PARA BACKUPS AUTOMÁTICOS ---
  qdrant_backup_scheduler:
    build: ./cron_jobs
    container_name: qdrant_backup_scheduler
    # Asegurarnos de que tenga acceso a las variables de entorno del .env
    env_file:
      - .env
    # Este servicio depende de qdrant. No se iniciará hasta que qdrant esté listo.
    depends_on:
      - qdrant
    # No necesita puertos, ya que solo se comunica internamente.
    # El restart asegura que si falla, se reinicie.
    restart: unless-stopped

volumes:
  qdrant_data:
  sqlserver_data: